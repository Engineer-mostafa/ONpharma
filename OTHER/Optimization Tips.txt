Don’t Index Everything
Minimize traffic by fetching only what you need:(Paging/chunked data retrieval to limit, Don’t use SELECT *, Be wary of lots of small quick queries if a longer query can be more efficient)
Use Slow Query Log (always have it on!)
Don’t use DISTINCT when you have or could use GROUP BY
Batch INSERT and REPLACE
Use LOAD DATA instead of INSERT
LIMIT m,n may not be as fast as it sounds
Use SQL_NO_CACHE when you are SELECTing frequently updated data or large sets of data
avoid wildcards at the start of LIKE queries
avoid correlated subqueries and in select and where clause (try to avoid in)
ORDER BY and LIMIT work best with equalities and covered indexes
Do not duplicate indexes
Design sane query schemas. don’t be afraid of table joins, often they are faster than denormalization
Don’t use boolean flags
Use a clever key and ORDER BY instead of MAX
Know when to split a complex query and join smaller ones
make it a habit to REVERSE() email addresses, so you can easily search domains
Normalize first, and denormalize where appropriate
In 5.1 BOOL/BIT NOT NULL type is 1 bit, in previous versions it’s 1 byte
A NULL data type can take more room to store than NOT NULL
Choose appropriate character sets & collations — UTF16 will store each character in 2 bytes, whether it needs it or not, latin1 is faster than UTF8
make similar queries consistent so cache is used
Have good SQL query standards
Use Triggers wisely
Run in SQL_MODE=STRICT to help identify warnings
Turning OR on multiple index fields (<5.0) into UNION may speed things up (with LIMIT), after 5.0 the index_merge should pick stuff up
use min_rows and max_rows to specify approximate data size so space can be pre-allocated and reference points can be calculated
create a test environment
Use myisam_pack_keys for int data
Don’t use COUNT * on Innodb tables for every search, do it a few times and/or summary tables, or if you need it for the total # of rows, use SQL_CALC_FOUND_ROWS and SELECT FOUND_ROWS()
Use INSERT … ON DUPLICATE KEY update (INSERT IGNORE) to avoid having to SELECT
use groupwise maximum instead of subqueries
use multi_query if appropriate to reduce round-trips